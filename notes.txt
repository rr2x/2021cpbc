PEP 8:1
  4 space for indentation
  79 max character per line

  vscode settings.json:
      "[python]": {
        "editor.tabSize": 4,
        "editor.insertSpaces": true,
        "editor.rulers": [
          79
        ]
      }

  https://www.python.org/dev/peps/pep-0008/


data structures: can hold multiple data types or data objects
  Dictionaries (dict), unordered key:value pairs, {"k":"v"}
  Tuples (tup), ordered immutable sequence of objects, (1,"2",3.3)
  Sets (set), unordered collection of unique objects, {"d","e"}

dynamic typing: reassign variables to different data types
type(...)  = to determine the type


indexing = grab single character on string using square brackets
can do reverse indexing using by using negative values

indexing: [index]
substring: [start:stop:step]
  start: where you start
  stop: where you stop but not include
  step: size of the "jump" you take

"f strings", or "formatted string literals"
introduced in python 3.6

Lists: ordered sequence, can hold objects
uses: [val1,val2]

Dictionaries: unordered mapping... has key-value pairing,  grab objects by key
uses: {key1:val1, key2:val2}

Dictionary vs List

"dictionary" cannot be sorted but easily retrieve object by key
can convert it to "tuple" using "<dictionary>.items()"
it will return a list of tuples, they are immutable

"list" is retrieved by location and can be sorted/indexed/sliced
can convert it to a "set" using "set(<list>)"
set is like a dictionary but no keys, and values are all unique
any new value if already exists will not be added

Tuples: similar to lists BUT they cannot be changed (immutable)
can use operations of dictionaries but with additional methods:
index() and count()
uses: ()

immutablity is useful for data integrity
(because we don't want some objects to be reassigned)

Sets: unordered collection of unique elements
uses: {}

Booleans: only 'true' or 'false'

if you don't want to assign any datatype to variables use 'None' as value


alot of objects in Python are iterable


python operators:
  range = just like when manipulating lists and strings (has index, size, step)
  enumerate = return Tuple, useful for not needing to create a counter variable in a loop
  zip = returns a Tuple (after pairing up two or more lists)
        it will only go and zip as far as the list with the shortest count
  in = check if it exists on list, string, dictionary
  max = return max value in list
  min = return minimum value in list
  shuffle = randomize order of list, in-place function
  randint = give random number

list comprehension:
  creating of list easily, using a flattened for-loop
    v = [<element or operation or if-else> for <element> in <list> <if>]

methods:
  built in functions in objects


milestone project 1 (explanation):
  ~~ breakdown problems

  tic-tac-toe for 2 human players
  reprint board every move
  input of player position

  tic-tac-toe board (position):
  7 8 9
  4 5 6
  1 2 3

  alternate symbol X and O


  Welcome to Tic Tac Toe!

  Player 1: Do you want to be X or O?
  >> X

  Player 1 will go first.

  Are you ready to play? Enter 'Y' or 'N'.

  Choose your next position: (1-9)

    --- --- ---
   | 7 | 8 | 9 |
   |---|---|---|
   | 4 | 5 | 6 |
   |---|---|---|
   | 1 | 2 | 3 |
    --- --- ---

  Choose your next position: (1-9)

  Congratulations! You have won the game!




  __init__ = object constructor

  self = connected to instance of class

  camel case = for classes
  snake case = for variables and methods



PyPi = repository for 3rd party packages
>> pip install


__name__ vs __main__

in python there is no main()

all code at indentation level 0 will be run

__name__ = built in variable..
__name__ will have a value of "__main__" if run directly


try:
  # attempt to run code
except:
  # if error encountered from "try"
else:
  # execute if no error from "try"
finally:
  # run regardless if error or not




pylint & built-in unittest library

>> pip install pylint
>> pylint <file>.py



decorators: allows you to decorate a function, tack on extra
            functionality to an existing function, uses @